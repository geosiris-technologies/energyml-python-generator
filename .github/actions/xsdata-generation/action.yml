##
## Copyright (c) 2022-2023 Geosiris.
## SPDX-License-Identifier: Apache-2.0
##
---

name: Prepare Python and Poetry
Description: Install Python, Poetry and dev dependencies, cached for speed

inputs:
  
  xsd-url:  
    description: 'Url of the zip that contains the xsd files'
    required: true
  
  pkg-name:
    description: 'name of the package to generate (common|resqml|witsml|prodml)'
    required: true

  version-common:
    description: 'version of the common package'
    required: true

  version-resqml:
    description: 'version of the resqml package (if used for the generation)'
    default: ""

  version-witsml:
    description: 'version of the witsml package (if used for the generation)'
    default: ""

  version-prodml:
    description: 'version of the prodml package (if used for the generation)'
    default: ""

  download-only:
    description: 'stops the process after the zip download and extract, the generation will not be done'
    default: 'false'
    type: boolean


runs:
  using: "composite"
  steps:

    - name: Compute version env
      shell: bash
      run: |
        export PKG_VERSION="$(echo ${{ inputs.xsd-url }} | sed -r 's/.*_v(.*).zip$/\1/g')"
        export PKG_VERSION_UNDERSCORE="$(echo ${{ inputs.xsd-url }} | sed -r 's/.*_v(.*).zip$/\1/g' | sed -r 's/\./_/g')"
        
        # export variable to github env          
        echo "PKG_VERSION=$PKG_VERSION" >> $GITHUB_ENV
        echo "PKG_VERSION_UNDERSCORE=$PKG_VERSION_UNDERSCORE" >> $GITHUB_ENV

    - name: Download ${{ inputs.pkg-name }} xsd zip ${{ inputs.pkg-name }}
      shell: bash
      run : wget ${{ inputs.xsd-url }} -P ${{ github.workspace }}

    - name: Unzip ${{ inputs.pkg-name }} xsd zip ${{ inputs.pkg-name }}
      shell: bash
      run: 7z x ${{ github.workspace }}/${{ inputs.pkg-name }}*.zip -o${{ github.workspace }}/xsd/${{ inputs.pkg-name }}/

    - name: Generate
      if: ${{ inputs.download-only == 'false' }}
      shell: bash
      run: |
        poetry run xsdata generate -ss namespaces -p gen --postponed-annotations xsd/${{ inputs.pkg-name }}/*/xsd_schemas/

    - name: Renaming
      if: ${{ inputs.download-only == 'false' }}
      shell: bash
      run: |
        export ARGS_VERSION=`[ -n "${{ inputs.version-common }}" ] && echo '$ARGS_VERSION --common ${{ inputs.version-common }}'`
        export ARGS_VERSION=`[ -n "${{ inputs.version-resqml }}" ] && echo '$ARGS_VERSION --resqml ${{ inputs.version-resqml }}'`
        export ARGS_VERSION=`[ -n "${{ inputs.version-witsml }}" ] && echo '$ARGS_VERSION --witsml ${{ inputs.version-witsml }}'`
        export ARGS_VERSION=`[ -n "${{ inputs.version-prodml }}" ] && echo '$ARGS_VERSION --prodml ${{ inputs.version-prodml }}'`
        
        poetry run rename_pkgs $ARGS_VERSION --src gen -o energyml

    - name: Move only the appropriate module in src folder
      if: ${{ inputs.download-only == 'false' }}
      shell: bash
      run: |
        function folder_match_pkg() {
            PKG=$(echo "$1" | tr '[:upper:]' '[:lower:]')
            FOLDER=$(echo "$2" | tr '[:upper:]' '[:lower:]')
            if [ "$PKG" = "$FOLDER" ] || { [ "$PKG" = "common" ] && [ "$FOLDER" = "eml" ] ;};
            then
              return 0;
            else
              return 1;
            fi
        }
                
        for f in $(ls energyml); do
          if folder_match_pkg ${{ inputs.pkg-name }} $f;
          then echo "$f kept";
          else 
            echo "removing $f";
            rm -rf $f;
          fi
        done
        
        mv energyml src/energyml
        
        echo "SRC_CONTENT=$(echo \"$(ls -R src)\")" >> $GITHUB_ENV

    - name: Cleaning
      if: ${{ inputs.download-only == 'false' }}
      shell: bash
      run: rm -rf gen
  